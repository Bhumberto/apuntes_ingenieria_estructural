# import numpy as np
import matplotlib.pyplot as plt
import math
import columnas_utils as col
import pandas as pd
# %cd ..\..\etabs_oapi
# import sismo_utils as sis
# import etabs_utils as etb
# %cd ..\concreto\columnas


# Definicion de las unidades
N = 1
m = 1
cm = 1/100
Pa = 1
MPa = 10**6
pulg = 2.54 / 100

# Definicion de varillas de acero:
d_3 = 3/8 * pulg
d_4 = 1/2 * pulg
d_5 = 5/8 * pulg
d_6 = 3/4 * pulg
d_8 = 1 * pulg

A_3 = d_3 ** 2 /4 * math.pi
A_4 = d_4 ** 2 /4 * math.pi
A_5 = d_5 ** 2 /4 * math.pi
A_6 = d_6 ** 2 /4 * math.pi
A_8 = d_8 ** 2 /4 * math.pi

#Definiendo geometría de la columna
b = 35*cm
h = 75*cm
r = 4*cm
l = 2.5*m
column = col.Column(b, h, r,l)

# Concreto
fc = 21*MPa #Resistencia a la compresion
eps_u = 0.003 #Deformación unitaria ultima
column.set_concrete(fc, eps_u)

#Acero de refuerzo
fy = 420*MPa #Esfuerzo a la fluencia del acero
Es = 200000*MPa #Módulo de elasticidad del acero
eps_y = fy/Es #Deformación de fluencia del acero
column.set_steel_reb(fy, Es)

#Acero de refuerzo colocado
d_p = d_5 #diámetro principal
d_s = d_5 #diámetro secundario
d_st = d_3 #diámetro del estribo
n_f = 6  #filas de acero
n_c = 3 #columnas de acero
column.set_rebar(d_p, d_s, d_st, n_f, n_c)

#factor de minoración
phi = 0.65
column.compress_resist(phi)

#Datos diagrama a flexocompresion
column.biaxial_flex_comp()

#Importación de cargas
cargas = pd.read_csv('cargas.csv',sep=';')

#Conversion de unidades
cargas.P = cargas.P*9.81*10**3
cargas.M2 = cargas.M2*9.81*10**3
cargas.M3 = cargas.M3*9.81*10**3

#Diagrama a flexocompresión
fig = plt.figure()
ax = fig.add_subplot(projection='3d')
column.plot_bi_f_c(ax,loads=cargas)
plt.title('Diagrama de Flexocompresión')
ax.set_xlabel("$\phi Mn_x$ (kN-m)")
ax.set_ylabel("$\phi Mn_x$ (kN-m)")
ax.set_zlabel("$\phi Pn$ (kN)")
plt.show()

#Eje x
fig, ax = plt.subplots()
column.plot_f_c(ax,loads=cargas,axis='x')
plt.show()

#Eje y
fig, ax = plt.subplots()
column.plot_f_c(ax,loads=cargas,axis='y')
plt.show()


#Datos de las vigas
#Viga en el sentido Y:
viga_1 = col.Beam(b=25*cm,h=40*cm,r=9*cm)
viga_1.set_rebar(d_s=d_5, n_s=4)
viga_1.ln = 5.65*m-0.2*m

#Vigas en el sentido X
viga_2 = col.Beam(b=35*cm,h=55*cm,r=9*cm)
viga_2.set_rebar(d_s=[d_5,d_6], n_s=[2,2])
viga_2.ln = 4.56*m-0.35*m
viga_3 = col.Beam(b=35*cm,h=55*cm,r=9*cm)
viga_3.set_rebar(d_s=d_5, n_s=3)
viga_3.ln = 4*m-0.35*m


#verificación columna fuerte viga debil
column.colstrong_beamw(viga_1,cargas)

#Verificación por longitud de desarrollo en la columna
column.long_dev(viga_2,d_6)

#Longitud de confinamiento
hn = 2.1*m
h = column.h
Lo = max(b,h,hn/6,45*cm)

#Confinamiento de barras:
column.strib_area(s=10*cm, loads=cargas)

#Resistencia a cortante
column.add_stirrup(db=d_4,n=2,theta=0,axis='x',check=True)
column.add_stirrup(db=d_4,n=2,theta=0,axis='y',check=False)
column.add_stirrup(db=d_3,n=4,theta=0,axis='y',check=True)
column.strib_des(loads=cargas,beamx=viga_2,beamy=viga_1,phi_c=0.85,lamb=1, graph = True)
column.s

#Diseño considerando rotulas en vigas
#Momentos Probables en las vigas
#Sentido X
viga_1.a = viga_1.Ast*1.25*fy/(0.85*fc*viga_1.b)
Mpx = viga_1.Ast*1.25*fy*(viga_1.d-viga_1.a/2)
Vux = 4*Mpx/(2*hn2)
#Sentido Y
viga_2.a = viga_2.Ast*1.25*fy/(0.85*fc*viga_2.b)
Mpy1 = viga_2.Ast*1.25*fy*(viga_2.d-viga_2.a/2)
viga_3.a = viga_3.Ast*1.25*fy/(0.85*fc*viga_3.b)
Mpy2 = viga_3.Ast*1.25*fy*(viga_3.d-viga_3.a/2)
Mpy = max(Mpy1,Mpy2)
Vuy = 2*Mpy/(2*hn2)

l1 = 4.21*m
l2 = 3.65*m

V2 = 2*Mpx/l1
V1 = 2*Mpx/l2

lc1 = 0.5*hn2+viga_1.h
Vcolx = 2*Mpx/lc1 + (V1+V2)*b/2/lc1

hv2 = 55*cm
lc2 = 0.5*hn1+hv2

l3 = 4.825*m
V3 = (Mpy1+Mpy2)/l3
Vcoly = Mpy/lc2+V3*h/2/lc2

#Fuerza cortante en el nudo
#Sentido X (dos vigas llegando al nudo)
T1 = viga_1.Ast*fy
T2 = T1
Vux = T1+T2-Vcolx
Vux
#Sentido Y (una viga en el nudo)
T3 = viga_2.Ast*fy
Vuy = T3-Vcoly
Vuy
#En nudos viga columna de porticos a momento especiales usamos un factor de:
phi_c = 0.85
fact = {'IA':1.7,
       'IB':1.3,
       'IC':1.3,
       'ID':1.0,
       'IIA':1.3,
       'IIB':1.0,
       'IIC':1.0,
       'IID':0.7}
#Análisis en X:
tipox = 'I' #columna continua
v_c = 'y' #continuidad de la viga después del nudo
if v_c == 'y':
    if viga_2.b >= 0.75*h:
        tipox += 'A'
    else:
        tipox += 'B'
else:
    if viga_2.b >= 0.75*h:
        tipox += 'C'
    else:
        tipox += 'D'
#Análisis en Y:
tipoy = 'I' #columna continua
v_c = 'n' #continuidad de la viga después del nudo
if v_c == 'y':
    if viga_2.b >= 0.75*h:
        tipoy += 'A'
    else:
        tipoy += 'B'
else:
    if viga_2.b >= 0.75*h:
        tipoy += 'C'
    else:
        tipoy += 'D'
#Cortante que resiste el nudo direccion X
befx = min(viga_1.b+b,viga_1.b) #Ancho efectivo del nudo en X
Ajx = befx*b
phiVnx = phi_c*fact[tipox]*(fc/MPa)**0.5*MPa*Ajx
phiVnx
#Cortante que resiste el nudo direccion X
befy = min(viga_2.b+h,viga_2.b) #Ancho efectivo del nudo en X
Ajy = befy*h
phiVny = phi_c*fact[tipoy]*(fc/MPa)**0.5*MPa*Ajy
phiVny